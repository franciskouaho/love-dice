rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function signedIn() {
      return request.auth != null;
    }

    function owner(uid) {
      return signedIn() && request.auth.uid == uid;
    }

    function isValidUser() {
      return signedIn() && request.auth.uid != null;
    }

    function isAdmin() {
      return signedIn() && request.auth.token.admin == true;
    }

    // Collection des utilisateurs
    match /users/{uid} {
      // Lecture: seulement le propriétaire
      allow read: if owner(uid);

      // Création: utilisateur authentifié peut créer son propre document
      allow create: if owner(uid) && isValidUser();

      // Mise à jour: seulement le propriétaire
      allow update: if owner(uid) && isValidUser();

      // Suppression: interdite (données importantes)
      allow delete: if false;

      // Validation des données lors de la création/mise à jour
      allow write: if owner(uid) &&
        validateUserData(request.resource.data);

      // Sous-collection historique
      match /history/{historyId} {
        allow read, write: if owner(uid);
        allow delete: if owner(uid);
      }

      // Sous-collection faces personnalisées
      match /faces/{faceId} {
        allow read, write: if owner(uid);
        allow delete: if owner(uid);

        // Validation des faces personnalisées
        allow write: if owner(uid) &&
          validateFaceData(request.resource.data);
      }
    }

    // Collection des faces par défaut (lecture publique)
    match /defaultFaces/{faceId} {
      allow read: if true;
      allow write: if signedIn(); // Temporaire pour migration
    }

    // Collection des reçus IAP (seulement Functions)
    match /iapReceipts/{platform}/{receiptId} {
      allow read: if false; // Seulement Functions peuvent lire
      allow write: if isAdmin(); // Seulement Functions avec token admin
    }

    // Collection de configuration Remote Config (lecture publique)
    match /remoteConfig/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Collection des statistiques (lecture publique, écriture admin)
    match /stats/{statId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Fonctions de validation
    function validateUserData(data) {
      return data.keys().hasAll(['createdAt', 'hasLifetime', 'freeRollsUsedToday', 'freeDayKey', 'prefs']) &&
        data.hasLifetime is bool &&
        data.freeRollsUsedToday is int &&
        data.freeRollsUsedToday >= 0 &&
        data.freeRollsUsedToday <= 50 && // Limite raisonnable
        data.freeDayKey is string &&
        data.freeDayKey.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$') && // Format YYYY-MM-DD
        validatePrefs(data.prefs);
    }

    function validatePrefs(prefs) {
      return prefs.keys().hasAll(['haptics', 'weights']) &&
        prefs.haptics is bool &&
        validateWeights(prefs.weights);
    }

    function validateWeights(weights) {
      return weights.keys().hasAll(['payer', 'repas', 'activite']) &&
        weights.payer is number &&
        weights.repas is number &&
        weights.activite is number &&
        weights.payer >= 0 && weights.payer <= 1 &&
        weights.repas >= 0 && weights.repas <= 1 &&
        weights.activite >= 0 && weights.activite <= 1;
    }

    function validateFaceData(data) {
      return data.keys().hasAll(['label', 'category', 'emoji', 'weight']) &&
        data.label is string &&
        data.label.size() > 0 &&
        data.label.size() <= 50 &&
        data.category in ['payer', 'repas', 'activite'] &&
        data.emoji is string &&
        data.emoji.size() > 0 &&
        data.emoji.size() <= 10 &&
        data.weight is int &&
        data.weight >= 1 &&
        data.weight <= 10;
    }

    // Bloquer tout autre accès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
