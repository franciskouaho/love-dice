/**
 * Exemple d'utilisation du syst√®me de cache
 * Ce fichier montre comment utiliser les diff√©rents services de cache
 */

import { cacheService } from './cache';
import { getCurrentUserId } from './firestore';
import { initService } from './initialization';
import { syncService } from './sync';

/**
 * Exemple d'utilisation basique du cache
 */
export const basicCacheExample = async () => {
  console.log('üöÄ Exemple d\'utilisation basique du cache');

  try {
    // 1. Initialiser l'application
    console.log('1. Initialisation de l\'application...');
    const initialized = await initService.initialize();
    console.log('‚úÖ Application initialis√©e:', initialized);

    // 2. R√©cup√©rer les faces par d√©faut (utilise le cache)
    console.log('2. R√©cup√©ration des faces par d√©faut...');
    const defaultFaces = await syncService.syncDefaultFaces();
    console.log(`‚úÖ ${defaultFaces.length} faces par d√©faut r√©cup√©r√©es`);

    // 3. R√©cup√©rer la configuration (utilise le cache)
    console.log('3. R√©cup√©ration de la configuration...');
    const config = await syncService.syncAppConfig();
    console.log('‚úÖ Configuration r√©cup√©r√©e:', config.FREE_ROLLS_PER_DAY, 'lancers gratuits');

    // 4. R√©cup√©rer le profil utilisateur (si connect√©)
    const uid = getCurrentUserId();
    if (uid) {
      console.log('4. R√©cup√©ration du profil utilisateur...');
      const profile = await syncService.syncUserProfile(uid);
      console.log('‚úÖ Profil utilisateur r√©cup√©r√©:', profile?.uid);
    }

    // 5. Obtenir les statistiques du cache
    console.log('5. Statistiques du cache...');
    const stats = await cacheService.getCacheStats();
    console.log('‚úÖ Statistiques du cache:', {
      entries: stats.entries,
      totalSize: `${(stats.totalSize / 1024).toFixed(2)} KB`,
    });

  } catch (error) {
    console.error('‚ùå Erreur dans l\'exemple basique:', error);
  }
};

/**
 * Exemple de synchronisation forc√©e
 */
export const forceSyncExample = async () => {
  console.log('üîÑ Exemple de synchronisation forc√©e');

  try {
    // Forcer la synchronisation de toutes les donn√©es
    await initService.forceSyncAll();
    console.log('‚úÖ Synchronisation forc√©e termin√©e');

    // V√©rifier les nouvelles donn√©es
    const defaultFaces = await syncService.syncDefaultFaces();
    console.log(`‚úÖ ${defaultFaces.length} faces synchronis√©es`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation forc√©e:', error);
  }
};

/**
 * Exemple de gestion du cache
 */
export const cacheManagementExample = async () => {
  console.log('üóÇÔ∏è Exemple de gestion du cache');

  try {
    // 1. Obtenir les statistiques du cache
    const stats = await cacheService.getCacheStats();
    console.log('üìä Statistiques du cache:', {
      entries: stats.entries,
      totalSize: `${(stats.totalSize / 1024).toFixed(2)} KB`,
    });

    // 2. Lister les m√©tadonn√©es du cache
    console.log('üìã M√©tadonn√©es du cache:');
    stats.metadata.forEach((metadata, key) => {
      const age = Date.now() - metadata.lastUpdated;
      const ageMinutes = Math.floor(age / (1000 * 60));
      console.log(`  - ${key}: ${ageMinutes}min, source: ${metadata.source}`);
    });

    // 3. Vider le cache
    console.log('üóëÔ∏è Vidage du cache...');
    await cacheService.clearAllCache();
    console.log('‚úÖ Cache vid√©');

    // 4. V√©rifier que le cache est vide
    const emptyStats = await cacheService.getCacheStats();
    console.log('üìä Cache apr√®s vidage:', {
      entries: emptyStats.entries,
      totalSize: `${(emptyStats.totalSize / 1024).toFixed(2)} KB`,
    });

  } catch (error) {
    console.error('‚ùå Erreur dans la gestion du cache:', error);
  }
};

/**
 * Exemple de test de performance
 */
export const performanceTestExample = async () => {
  console.log('‚ö° Test de performance du cache');

  try {
    const uid = getCurrentUserId();
    if (!uid) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√© pour le test');
      return;
    }

    // Test 1: Premier chargement (depuis Firebase)
    console.log('1. Premier chargement (depuis Firebase)...');
    const start1 = Date.now();
    const faces1 = await syncService.syncDefaultFaces(true);
    const time1 = Date.now() - start1;
    console.log(`‚úÖ Premier chargement: ${time1}ms pour ${faces1.length} faces`);

    // Test 2: Deuxi√®me chargement (depuis le cache)
    console.log('2. Deuxi√®me chargement (depuis le cache)...');
    const start2 = Date.now();
    const faces2 = await syncService.syncDefaultFaces(false);
    const time2 = Date.now() - start2;
    console.log(`‚úÖ Deuxi√®me chargement: ${time2}ms pour ${faces2.length} faces`);

    // Test 3: Chargement du profil utilisateur
    console.log('3. Chargement du profil utilisateur...');
    const start3 = Date.now();
    const profile = await syncService.syncUserProfile(uid, false);
    const time3 = Date.now() - start3;
    console.log(`‚úÖ Profil utilisateur: ${time3}ms`);

    // Calcul de l'am√©lioration
    const improvement = ((time1 - time2) / time1) * 100;
    console.log(`üìà Am√©lioration avec le cache: ${improvement.toFixed(1)}%`);

  } catch (error) {
    console.error('‚ùå Erreur dans le test de performance:', error);
  }
};

/**
 * Exemple d'utilisation avec les hooks React
 */
export const reactHooksExample = () => {
  console.log('‚öõÔ∏è Exemple d\'utilisation avec les hooks React');
  console.log(`
// Dans un composant React :

import { useDefaultFaces, useUserProfile, useAppInitialization } from '../hooks/useCache';

function MyComponent() {
  // Initialisation de l'app
  const { isInitialized, initialize } = useAppInitialization();
  
  // Faces par d√©faut
  const { faces, loading, error, refresh } = useDefaultFaces();
  
  // Profil utilisateur
  const { profile } = useUserProfile();
  
  useEffect(() => {
    if (!isInitialized) {
      initialize();
    }
  }, [isInitialized, initialize]);
  
  if (loading) return <Loading />;
  if (error) return <Error message={error} />;
  
  return (
    <View>
      <Text>Faces charg√©es: {faces.length}</Text>
      <Button title="Actualiser" onPress={refresh} />
    </View>
  );
}
  `);
};

/**
 * Ex√©cuter tous les exemples
 */
export const runAllExamples = async () => {
  console.log('üéØ Ex√©cution de tous les exemples de cache');
  
  try {
    await basicCacheExample();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await performanceTestExample();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await cacheManagementExample();
    console.log('\n' + '='.repeat(50) + '\n');
    
    reactHooksExample();
    
    console.log('\n‚úÖ Tous les exemples termin√©s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des exemples:', error);
  }
};

// Export des exemples individuels
export {
    basicCacheExample, cacheManagementExample, forceSyncExample, performanceTestExample,
    reactHooksExample
};

