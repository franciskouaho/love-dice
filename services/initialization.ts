import { AppState, AppStateStatus } from 'react-native';
import { cacheService } from './cache';
import { getCurrentUserId } from './firestore';
import { syncService } from './sync';

/**
 * Service d'initialisation et de gestion du cache
 * G√®re le chargement initial et la synchronisation en arri√®re-plan
 */
export class InitializationService {
  private static instance: InitializationService;
  private isInitialized = false;
  private backgroundSyncInterval: ReturnType<typeof setInterval> | null = null;
  private appStateSubscription: any = null;

  static getInstance(): InitializationService {
    if (!InitializationService.instance) {
      InitializationService.instance = new InitializationService();
    }
    return InitializationService.instance;
  }

  private constructor() {
    this.setupAppStateListener();
  }

  /**
   * Initialiser l'application avec le syst√®me de cache
   */
  async initialize(): Promise<boolean> {
    if (this.isInitialized) {
      console.log('üì± Application d√©j√† initialis√©e');
      return true;
    }

    try {
      console.log('üöÄ Initialisation de l\'application avec cache...');
      
      // 1. Charger les donn√©es publiques (faces par d√©faut, config) m√™me sans utilisateur
      console.log('üì± Chargement des donn√©es publiques depuis le cache...');
      await this.loadPublicDataFromCache();

      // 2. Si un utilisateur est connect√©, charger ses donn√©es personnelles
      const uid = getCurrentUserId();
      if (uid) {
        console.log('üì± Utilisateur connect√©, chargement des donn√©es personnelles...');
        await this.loadUserDataFromCache(uid);
        this.startBackgroundSync(uid);
      } else {
        console.log('‚ÑπÔ∏è Aucun utilisateur connect√©, donn√©es publiques seulement');
      }

      this.isInitialized = true;
      console.log('‚úÖ Application initialis√©e avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
      return false;
    }
  }

  /**
   * Charger les donn√©es publiques depuis le cache (faces par d√©faut, config)
   * Si le cache est vide, charger depuis Firebase
   */
  private async loadPublicDataFromCache(): Promise<void> {
    try {
      // Charger les donn√©es publiques en parall√®le depuis le cache
      const [
        defaultFaces,
        appConfig
      ] = await Promise.allSettled([
        syncService.syncDefaultFaces(false), // Utilise le cache d'abord
        syncService.syncAppConfig(false),
      ]);

      // Log des r√©sultats
      if (defaultFaces.status === 'fulfilled') {
        console.log(`üì± ${defaultFaces.value.length} faces par d√©faut charg√©es`);
        
        // Si pas de faces dans le cache, charger depuis Firebase
        if (defaultFaces.value.length === 0) {
          console.log('üîÑ Cache vide, chargement depuis Firebase...');
          await this.loadDefaultFacesFromFirebase();
        }
      } else if (defaultFaces.status === 'rejected') {
        console.error('‚ùå Erreur chargement faces par d√©faut:', defaultFaces.reason);
      }
      
      if (appConfig.status === 'fulfilled') {
        console.log('üì± Configuration charg√©e');
      } else if (appConfig.status === 'rejected') {
        console.error('‚ùå Erreur chargement config:', appConfig.reason);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des donn√©es publiques:', error);
    }
  }

  /**
   * Charger les faces par d√©faut depuis Firebase et les mettre en cache
   */
  private async loadDefaultFacesFromFirebase(): Promise<void> {
    try {
      console.log('üî• Chargement des faces par d√©faut depuis Firebase...');
      
      // Importer la fonction de r√©cup√©ration depuis Firebase
      const { fetchDefaultFacesFromFirebase } = await import('./faces');
      
      // R√©cup√©rer depuis Firebase
      const faces = await fetchDefaultFacesFromFirebase();
      console.log(`üî• ${faces.length} faces r√©cup√©r√©es depuis Firebase`);
      
      // Mettre en cache
      await cacheService.setDefaultFaces(faces);
      console.log('üíæ Faces mises en cache local');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement depuis Firebase:', error);
    }
  }

  /**
   * Charger les donn√©es utilisateur depuis le cache
   */
  private async loadUserDataFromCache(uid: string): Promise<void> {
    try {
      // Charger les donn√©es utilisateur en parall√®le depuis le cache
      const [
        userProfile,
        userFaces
      ] = await Promise.allSettled([
        syncService.syncUserProfile(uid, false),
        syncService.syncUserFaces(uid, false),
      ]);

      // Log des r√©sultats
      if (userProfile.status === 'fulfilled' && userProfile.value) {
        console.log('üì± Profil utilisateur charg√©');
      } else if (userProfile.status === 'rejected') {
        console.error('‚ùå Erreur chargement profil:', userProfile.reason);
      }
      
      if (userFaces.status === 'fulfilled') {
        console.log(`üì± ${userFaces.value.length} faces personnalis√©es charg√©es`);
      } else if (userFaces.status === 'rejected') {
        console.error('‚ùå Erreur chargement faces utilisateur:', userFaces.reason);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des donn√©es utilisateur:', error);
    }
  }

  /**
   * D√©marrer la synchronisation en arri√®re-plan
   */
  private startBackgroundSync(uid: string): void {
    // Synchronisation imm√©diate
    syncService.backgroundSync(uid);

    // Synchronisation p√©riodique (toutes les 5 minutes)
    this.backgroundSyncInterval = setInterval(() => {
      syncService.backgroundSync(uid);
    }, 5 * 60 * 1000);
  }

  /**
   * Arr√™ter la synchronisation en arri√®re-plan
   */
  private stopBackgroundSync(): void {
    if (this.backgroundSyncInterval) {
      clearInterval(this.backgroundSyncInterval);
      this.backgroundSyncInterval = null;
    }
  }

  /**
   * Configurer l'√©coute des changements d'√©tat de l'app
   */
  private setupAppStateListener(): void {
    this.appStateSubscription = AppState.addEventListener('change', (nextAppState: AppStateStatus) => {
      this.handleAppStateChange(nextAppState);
    });
  }

  /**
   * G√©rer les changements d'√©tat de l'application
   */
  private handleAppStateChange(nextAppState: AppStateStatus): void {
    const uid = getCurrentUserId();
    if (!uid) return;

    switch (nextAppState) {
      case 'active':
        console.log('üì± Application active - synchronisation...');
        // Synchroniser quand l'app redevient active
        syncService.backgroundSync(uid);
        break;
      case 'background':
        console.log('üì± Application en arri√®re-plan');
        // Optionnel : arr√™ter la sync p√©riodique en arri√®re-plan
        // this.stopBackgroundSync();
        break;
      case 'inactive':
        console.log('üì± Application inactive');
        break;
    }
  }

  /**
   * Forcer la synchronisation de toutes les donn√©es
   */
  async forceSyncAll(): Promise<void> {
    const uid = getCurrentUserId();
    if (!uid) {
      console.warn('‚ö†Ô∏è Aucun utilisateur connect√© pour la synchronisation forc√©e');
      return;
    }

    console.log('üîÑ Synchronisation forc√©e de toutes les donn√©es...');
    await syncService.forceSyncAll(uid);
  }

  /**
   * Obtenir les statistiques du cache
   */
  async getCacheStats(): Promise<{
    totalSize: number;
    entries: number;
    metadata: Map<string, any>;
  }> {
    return await cacheService.getCacheStats();
  }

  /**
   * Vider le cache
   */
  async clearCache(): Promise<void> {
    console.log('üóëÔ∏è Vidage du cache...');
    await cacheService.clearAllCache();
    console.log('‚úÖ Cache vid√©');
  }

  /**
   * Nettoyer les ressources
   */
  cleanup(): void {
    this.stopBackgroundSync();
    if (this.appStateSubscription) {
      this.appStateSubscription.remove();
      this.appStateSubscription = null;
    }
    this.isInitialized = false;
  }

  /**
   * V√©rifier si l'application est initialis√©e
   */
  isAppInitialized(): boolean {
    return this.isInitialized;
  }

  /**
   * Re-initialiser l'application (utile apr√®s connexion utilisateur)
   */
  async reinitialize(): Promise<boolean> {
    console.log('üîÑ R√©-initialisation de l\'application...');
    this.cleanup();
    return await this.initialize();
  }

  /**
   * Initialiser les donn√©es utilisateur apr√®s connexion
   */
  async initializeUserData(): Promise<void> {
    const uid = getCurrentUserId();
    if (!uid) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√© pour l\'initialisation des donn√©es');
      return;
    }

    try {
      console.log('üë§ Initialisation des donn√©es utilisateur...');
      await this.loadUserDataFromCache(uid);
      this.startBackgroundSync(uid);
      console.log('‚úÖ Donn√©es utilisateur initialis√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des donn√©es utilisateur:', error);
    }
  }
}

// Instance singleton
export const initService = InitializationService.getInstance();

// Fonction d'initialisation simple pour usage externe
export const initializeApp = async (): Promise<boolean> => {
  return await initService.initialize();
};

// Fonction de synchronisation forc√©e pour usage externe
export const forceSync = async (): Promise<void> => {
  return await initService.forceSyncAll();
};

// Fonction de nettoyage pour usage externe
export const cleanupApp = (): void => {
  initService.cleanup();
};